{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAsEA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAItD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACnB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAkBpBC,MAnDf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACrC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAE/Dd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACbL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCNHC,6MAlDbC,MAAO,KAQPC,cAAgB,WASd,OAReC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAOxB,MAAOuB,EAAME,cAC3B/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAQpBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEWb,EAAKc,WAFhB,OAELb,EAFKU,EAAAI,KAIXf,EAAKgB,SAAS,CACZf,WALS,wBAAAU,EAAAM,SAAAT,QASbM,SAAW,WAGT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAhC1BG,KAAKpB,8CAmCE,IACCN,EAAW0B,KAAK7B,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,eAC9BA,EAAS0B,KAAK5B,gBAAkB,kBA9CvB6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.6d7dc4b1.chunk.js","sourcesContent":["//import React, { Component } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n/*\r\nclass Movie extends Component {\r\n\r\n  static propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <MoviePoster poster={this.props.poster} />\r\n        <h1>{this.props.title}</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass MoviePoster extends Component{\r\n\r\n  static propTypes = {\r\n    title: PropTypes.string.isRequired\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <img src={this.props.poster} alt=\"Movie Poster\"/>\r\n    )\r\n  }\r\n}\r\n*/\r\n\r\n//functional component\r\n//render과 라이프사이클이 없음\r\n//state없이 props만 있을때 컴포넌트 대신 functional 컴포넌트를 쓴다. = stateless\r\n//stateless functional 컴포넌트\r\n//단지 return만 한다. update state, willmount 등 필요가 없음\r\n//props만 필요\r\n//JSX의 class = className\r\nfunction Movie({title, poster, genres, synopsis}){\r\n  return(\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie_Columns\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"Movie_Columns\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie_Genres\">\r\n          {genres.map((genre, index) => <MovieGenre genre={genre} key={index} /> )}\r\n        </div>\r\n        <p className=\"Movie_Synopsis\">\r\n        <LinesEllipsis\r\n          text={synopsis}\r\n          maxLine='3'\r\n          ellipsis='...'\r\n          trimRight\r\n          basedOn='letters'\r\n          />   \r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n  return(\r\n    <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\" />\r\n  )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n  return (\r\n    <span className=\"Movie_Genre\">{genre}</span>\r\n  )\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired\r\n}\r\nexport default Movie;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state ={\n  }\n\n  componentDidMount(){\n\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie title={movie.title_english}\n      poster={movie.medium_cover_image}\n      key={movie.id}\n      genres={movie.genres}\n      synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  } //리액트와 차이를 두기위해 언더스코어로 시작한다\n\n//asynchronous function\n//async를 써야 await 작동\n  _getMovies = async () => {\n    //await는 callApi 함수가 끝나는 것을 기다린다.\n    const movies  = await this._callApi()\n    //작업이 완료된 후에 setState\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    //promise : 비동기 , 자바스크립트 컨셉 , 시나리오 스케줄관리\n    //fetch : url ajax 비동기\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json()) //성공하면 then fetch의 결과물\n    .then(json => json.data.movies) //=>에 return 내재되있음\n    .catch(err => console.log(err)) //에러 catch\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovies() : 'Loading' }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}